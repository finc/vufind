import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;
import java.util.regex.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Copyright (C) 2012 Leander Seige, seige@ub.uni-leipzig.de
 * Leipzig University Library, Project finc
 * http://www.ub.uni-leipzig.de
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author   Leander Seige
 * @author   Polichronis Tsolakidis, tsolakidis@ub.uni-leipzig.de
 * @license  http://opensource.org/licenses/gpl-3.0.html GNU General Public License
 * @link     http://finc.info
 */

static final Logger logger = Logger.getLogger("de.ubl.import.format");

public Set getSignatur(Record record) {

    logger.setLevel( Level.WARNING ); // WARNING,FINE,INFO,ALL and so on

	Pattern pattern = Pattern.compile("^(.*):([^:]*)$");

	Set result = new LinkedHashSet();

	List fields,subfields;
	Iterator fields_it,subfields_it;
	DataField field;
	String value,temp;
	String[] values;

	fields = record.getVariableFields("971");
    if (fields != null) {
        fields_it = fields.iterator();
        while(fields_it.hasNext()) {
            field = (DataField) fields_it.next();
            subfields = field.getSubfields( 'j' );
            if( subfields != null ) {
                subfields_it= subfields.iterator();
                while( subfields_it.hasNext() ) {
                    value=subfields_it.next().getData();
                    Matcher matcher = pattern.matcher(value);
                    if( matcher.find() ) {
                        for( int i = 1; i <= matcher.groupCount(); i++ ) {
                            if( i > 1 ) {
                                temp = "(DE-Ch1)" + matcher.group(i); 
                                result.add(temp);
                            }
                        }
                    }
                    result.add(value);	
                }
            }
        }
    }

	fields = record.getVariableFields("972");
    if (fields != null) {
        fields_it = fields.iterator();
        while(fields_it.hasNext()) {
            field = (DataField) fields_it.next();
            subfields = field.getSubfields('i');
            if (subfields != null) {
                subfields_it= subfields.iterator();
                while (subfields_it.hasNext()) {
                    value=subfields_it.next().getData();
                    result.add(value);
                }
            }
        }
    }

	fields = record.getVariableFields("981");
    if (fields != null) {
        fields_it = fields.iterator();
        while(fields_it.hasNext()) {
            field = (DataField) fields_it.next();
            subfields = field.getSubfields('a');
            if (subfields != null) {
                subfields_it= subfields.iterator();
                while (subfields_it.hasNext()) {
                    value = subfields_it.next().getData();
                    result.add(value);
                }
            }
        }
    }

    // #1302 - Zwickau Finc-Kategorie
	fields = record.getVariableFields("975");
    if (fields != null) {
        fields_it = fields.iterator();
        while(fields_it.hasNext()) {
            field = (DataField) fields_it.next();
            subfields = field.getSubfields('o');
            if (subfields != null) {
                subfields_it= subfields.iterator();
                while (subfields_it.hasNext()) {
                    value = subfields_it.next().getData();
                    result.add( "(DE-Zwi2)" + value);
                }
            }
        }
    }

    logger.info( "SIGNATUR => " + result);

    return result;

}

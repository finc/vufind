import java.io.*;
import java.sql.*;
import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Subfield;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.google.gson.Gson;

org.solrmarc.index.SolrIndexer indexer = null;
static final Properties properties = new Properties();
static final String sDbDrv = "com.mysql.jdbc.Driver";
static Connection cn = null;
static PreparedStatement st = null;
static final Logger logger  = Logger.getLogger("de.ubl.import.getitemdatajson");
static final Gson gson      = new com.google.gson.GsonBuilder().create();

/*
 * Copyright (C) 2012 Leander Seige, seige@ub.uni-leipzig.de
 * Leipzig University Library, Project finc
 * http://www.ub.uni-leipzig.de
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hospe that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author   Polichronis Tsolakidis
 * @license  http://opensource.org/licenses/gpl-3.0.html GNU General Public License
 * @link     http://finc.info
 */

/**
* Ticket #2648, #3962
*
*/
public String getItemDataJSON( Record record ) {  
    
    logger.setLevel(Level.WARNING); // WARNING,FINE,INFO,ALL and so on

    String vufindHome = System.getenv( "VUFIND_HOME_SOLR4" );
    if (vufindHome == null) {
        vufindHome = "";
    }

    String result = "";

    String source_id = indexer.getFirstFieldVal(record, "980b");
    if(source_id == null || !source_id.equals("0")) {
        return result; 
    }

    synchronized(properties) {
        if(properties.size() == 0) {
            Class.forName( sDbDrv );
            try {
                String ppPath = vufindHome + "/import/index_scripts/mddb.conf";
                properties.load(new FileInputStream( ppPath ));
                properties.put("LOAD","true");
            } catch (IOException e) {
                logger.severe("ERROR gIDJ reading config file (getItemDataJSON)");
                return result;
            }
            String sDbUrl=properties.getProperty("DatabaseUrl");
            String sUsr=properties.getProperty("DatabaseUser");
            String sPwd=properties.getProperty("DatabasePassword");
            try {
                logger.info("CONNECT gIDJ to " + sDbUrl);
                cn = DriverManager.getConnection( sDbUrl, sUsr, sPwd );
                st = cn.prepareStatement(
                    "SELECT   sigel,barcode,call_number " +
                    "FROM     item " + 
                    "WHERE    finc_id = ? " +
                    "ORDER BY sigel"
                );
                logger.info("CONNECT gIDJ OK => " + sDbUrl);
            } catch(Exception e) {
                logger.severe("ERROR gIDJ create database connection: " + e.getMessage());
                return result;
            }
            logger.info("CONNECT gIDJ to " + sDbUrl);
            Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
                public void run() {
                    logger.info("SHUTTING DOWN gIDJ statement");
                    try { if( null != st ) st.close(); } catch( Exception ex ) {}
                    logger.info("DISCONNECT gIDJ from " + sDbUrl);
                    try { if( null != cn ) cn.close(); } catch( Exception ex ) {}
                }
            }));
        }
    }

    String finc_id  = indexer.getFirstFieldVal(record, "001");
    Long fincNumber = Long.valueOf(finc_id);
    ResultSet    rs = null;

    try {

        HashMap sigelMap = new HashMap();
        st.setLong( 1, fincNumber);
        rs = st.executeQuery();
        while( rs.next() ) {
            List itemList = sigelMap.get( rs.getString(1) );
            if( itemList == null ) {
                itemList = new ArrayList();
                sigelMap.put( rs.getString(1), itemList);
            }
            HashMap bccn = new HashMap();
            bccn.put( "bc", rs.getString(2) );
            bccn.put( "cn", rs.getString(3) );
            itemList.add( bccn );
            // logger.info("ADDING gID : " + rs.getString(1));
        }
        try { rs.close(); } catch( Exception ex ) {}
        result = gson.toJson( sigelMap );
        logger.info( result );
    } catch( Exception ex ) {
        logger.severe( "ERROR gIDJ => " + ex.getMessage() );
    } finally {
        try { if( null != rs ) rs.close(); } catch( Exception ex ) {}
    }

    return result;
}

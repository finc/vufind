import java.io.*;
import java.sql.*;
import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Subfield;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.logging.Level;
import java.util.logging.Logger;

org.solrmarc.index.SolrIndexer indexer = null;
static final Properties properties = new Properties();
static final String sDbDrv = "com.mysql.jdbc.Driver";
static Connection cn = null;
static PreparedStatement st = null, stp = null;
static final Logger logger = Logger.getLogger("de.ubl.import.getbranches");
static final HashMap patternCache = new HashMap();

/*
 * Copyright (C) 2012 Leander Seige, seige@ub.uni-leipzig.de
 * Leipzig University Library, Project finc
 * http://www.ub.uni-leipzig.de
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author   Leander Seige
 * @author   Polichronis Tsolakidis
 * @license  http://opensource.org/licenses/gpl-3.0.html GNU General Public License
 * @link     http://finc.info
 */

public Set getBranches(Record record, String pattern) {  
    
    logger.setLevel(Level.WARNING); // FINE,INFO,ALL and so on

    String vufindHome = System.getenv( "VUFIND_HOME_SOLR4" );
    if (vufindHome == null) {
        vufindHome = "";
    }

    Set result = new LinkedHashSet();

    String source_id = indexer.getFirstFieldVal(record, "980b");

    // Ticket #1625
    if(source_id.equals("23")) {
        result.add("GR");
        return(result);
    }

    if(source_id == null || !source_id.equals("0")) {
        return(result); 
    }

    Set sigelfs = indexer.getFieldList(record, "852a");

    Matcher m = patternCache.get(pattern);
    if(m == null) {
        m = Pattern.compile(pattern).matcher("");
        patternCache.put(pattern, m);
    }
    
    String currentSigel = null;
    for( String current : sigelfs) {
        m.reset(current);
        if(m.find()) {
            currentSigel = current;
            break;
        }
    }
    
    if(currentSigel == null) {
        logger.info(">>> exiting due to pattern mismatch " + pattern);
        return(result);
    }

    logger.info(">>> getting branches for " + currentSigel);

    synchronized(properties) {
        if(properties.size() == 0) {
            Class.forName( sDbDrv );
            try {
                String ppPath = vufindHome + "/import/index_scripts/mddb.conf";
                properties.load(new FileInputStream( ppPath ));
                properties.put("LOAD","true");
            } catch (IOException e) {
                logger.severe("ERROR gB reading config file (mddb.conf)");
                return(result);
            }
            String sDbUrl=properties.getProperty("DatabaseUrl");
            String sUsr=properties.getProperty("DatabaseUser");
            String sPwd=properties.getProperty("DatabasePassword");
            try {
                logger.info("CONNECT gB to " + sDbUrl);
                cn = DriverManager.getConnection( sDbUrl, sUsr, sPwd );
                st = cn.prepareStatement(
                    "SELECT DISTINCT(branch) " +
                    "FROM item " + 
                    "WHERE finc_id = ? " +
                        "AND sigel = ?"
                );
                stp = cn.prepareStatement(
                    "SELECT DISTINCT(i.branch) " +
                    "FROM parents p, item i " +
                    // "WHERE p.parent_record_id = CONCAT('(DE-576)', ?) " +
                    "WHERE p.parent_record_id = ? " + // #4087
                        "AND i.finc_id = p.finc_id " +
                        "AND i.sigel = ?"
                );
                logger.info("CONNECT gB OK => " + sDbUrl);
            } catch(Exception e) {
                logger.severe("ERROR gB create database connection: " + e.getMessage());
                return(result);
            }
            logger.info("CONNECT gB to " + sDbUrl);
            Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
                public void run() {
                    logger.info("SHUTTING DOWN gB 1st statement");
                    try { if( null != stp ) stp.close(); } catch( Exception ex ) {}
                    logger.info("SHUTTING DOWN gB 2nd statement");
                    try { if( null != st ) st.close(); } catch( Exception ex ) {}
                    logger.info("DISCONNECT gB from " + sDbUrl);
                    try { if( null != cn ) cn.close(); } catch( Exception ex ) {}
                }
            }));
        }
    }
      
    String finc_id = indexer.getFirstFieldVal(record, "001");
    Long fincNumber = Long.valueOf(finc_id);
    String record_id = indexer.getFirstFieldVal(record, "980a");

    logger.info("checking gB " + finc_id + " " + source_id + " " + record_id);

    ResultSet          rs = null;

    try {

        st.setLong( 1, fincNumber);
        st.setString( 2, currentSigel);
        rs = st.executeQuery();
        while( rs.next() ) {
            if( rs.getString(1) == null ) continue;
            result.add(rs.getString(1));
            logger.info("ADDING gB : " + rs.getString(1));
        }
        try { rs.close(); } catch( Exception ex ) {}
        if( result.isEmpty() ) rs = null;

        if( rs == null ) {
            stp.setString( 1, record_id);
            stp.setString( 2, currentSigel);
            rs = stp.executeQuery();
            while( rs.next() ) {
                if( rs.getString(1) == null ) continue;
                result.add(rs.getString(1));
                logger.info("ADDING gB : " + rs.getString(1));
            }
        }

    } catch( Exception ex ) {
        logger.severe( "ERROR gB => " + ex.getMessage() );
    } finally {
        try { if( null != rs ) rs.close(); } catch( Exception ex ) {}
    }

    return result;
}

<?php
/**
 * MyResearch Controller
 *
 * PHP version 5
 *
 * Copyright (C) Villanova University 2010.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @category VuFind2
 * @package  Controller
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org   Main Site
 */
namespace finc\Controller;

use Zend\Validator\StringLength,
    Zend\I18n\Validator\Int,
    finc\Mailer\Mailer;

/**
 * Controller for the acqusition area.
 *
 * @category VuFind2
 * @package  Controller
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @author   Gregor Gawol <gawol@ub.uni-leipzig.de>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org   Main Site
 */
class MyResearchController extends \VuFind\Controller\MyResearchController
{

    /**
     * Subjects
     *
     * @var array
     */
    private $_subjectlist = [];

    /**
     * Returns the subject list generated by config setting in Acquisition section.
     * Rebuilds the subject list if it's empty.
     *
     * @return array
     */
    private function _getSubjectList()
    {

        if (count($this->_subjectlist) <= 0) {
            $this->_subjectlist = explode(
                ",",
                (isset($this->getConfig()->Acquisition->nepcategories)
                    ? $this->getConfig()->Acquisition->nepcategories : '')
            );

            foreach ($this->_subjectlist as $key => $subject) {
                // trim subject to avoid translation errors with preceding/trailing
                // whitespaces
                $this->_subjectlist[$key] = trim($subject);
            }
        }

        return $this->_subjectlist;
    }

    /**
     * Send a acquisition proposal
     *
     * @return mixed
     */
    public function acquisitionAction()
    {
        // Force login:
        $user = $this->getUser();
        if (!$user) {
            return $this->forceLogin();
        }

        // Process save action if necessary:
        if ($this->formWasSubmitted('submit')) {
            return $this->processAcquisition($user);
        }

        return $this->createViewModel(
            [
                'subjectlist' => $this->_getSubjectList()
            ]
        );
    }

    /**
     * Helper function acquisitionAction
     *
     * @param \VuFind\Db\Row\User $user logged in user
     *
     * @return \Zend\View\Model\ViewModel
     * @throws \VuFind\Exception\Mail
     */
    protected function processAcquisition($user)
    {
        $validatorAlnum = new Int();
        $validatorString = new StringLength(['min' => 1]);
        $valueArr = [];

        $subject = $this->params()->fromPost('subject');
        $valueArr['subject'] = $subject;
        $proposal = $this->params()->fromPost('proposal');
        $valueArr['proposal'] = $proposal;
        $reasons = $this->params()->fromPost('reasons');
        $valueArr['reasons'] = $reasons;
        $error = false;

        if ($validatorAlnum->isValid($subject)) {
            $this->flashMessenger()->setNamespace('error')
                ->addMessage('Subject area should not be blank');
            $error = true;
        }
        if (!$validatorString->isValid($proposal)) {
            $this->flashMessenger()->setNamespace('error')
                ->addMessage('Reasons for suggestion not be blank');
            $error = true;
        }
        if (!$validatorString->isValid($reasons)) {
            $this->flashMessenger()->setNamespace('error')
                ->addMessage('Proposal for acquisition should not be blank');
            $error = true;
        }

        if (!$error) {
            // send email
            try {
                $config = $this->getConfig();
                $renderer = $this->getViewRenderer();
                // Custom template for emails (html-only)
                $message_html = $renderer->render(
                    'Email/acquisition-html.phtml',
                    [
                        'user' => $user,
                        'subject' => $this->translate($subject),
                        'proposal' => $proposal,
                        'reasons' => $reasons,
                        'time' => date('d.m.Y H:i')
                    ]
                );
                // Custom template for emails (text-only)
                $message_text = $renderer->render(
                    'Email/acquisition-text.phtml',
                    [
                        'user' => $user,
                        'subject' => $this->translate($subject),
                        'proposal' => $proposal,
                        'reasons' => $reasons,
                        'time' => date('d.m.Y H:i')
                    ]
                );
                $subject = (
                    isset($config->Acquisition->subject_acquisition)
                        ? sprintf(
                            $config->Acquisition->subject_acquisition,
                            $this->translate($subject), $user->username
                        )
                        : $this->translate('Suggestions for acquisition')
                );
                $from_unknown = (isset($config->Acquisition->from_unknown)
                    ? $config->Acquisition->from_unknown : '');
                $from = (isset($user->email)
                    ? $user->email : $from_unknown);
                $to = (isset($config->Acquisition->to)
                    ? $config->Acquisition->to : '');
                $mailer = new Mailer(
                    $this->getServiceLocator()
                        ->get('VuFind\Mailer')->getTransport()
                );

                $reply_to = $from;
                $reply_to_name = $user->firstname . ' ' . $user->lastname;

                $mailer->sendTextHtml(
                    $to,
                    $from,
                    $reply_to,
                    $reply_to_name,
                    $subject,
                    $message_html,
                    $message_text
                );
                $this->flashMessenger()->setNamespace('info')
                    ->addMessage('acquisition_success');
            } catch (MailException $e) {
                $this->flashMessenger()->setNamespace('error')
                    ->addMessage($e->getMessage());
            }
        }

        return $this->createViewModel(
            [
                'subjectlist' => $this->_getSubjectList(),
                'values' => $valueArr
            ]
        );
    }

}

<?php
/**
 * MyResearch Controller
 *
 * PHP version 5
 *
 * Copyright (C) Villanova University 2010.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @category VuFind
 * @package  Controller
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     https://vufind.org Main Site
 */
namespace finc\Controller;

use finc\Mailer\Mailer,
    VuFind\Exception\Mail as MailException,
    Zend\I18n\Validator\IsInt,
    Zend\Mail\Address,
    Zend\Validator\StringLength;

/**
 * Controller for the user account area.
 *
 * @category VuFind
 * @package  Controller
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @author   Gregor Gawol <gawol@ub.uni-leipzig.de>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     https://vufind.org Main Site
 */
class MyResearchController extends \VuFind\Controller\MyResearchController
{

    /**
     * Subjects
     *
     * @var array
     */
    private $_subjectlist = [];

    /**
     * Returns the subject list generated by config setting in Acquisition section.
     * Rebuilds the subject list if it's empty.
     *
     * @return array
     */
    private function _getSubjectList()
    {
        if (count($this->_subjectlist) <= 0) {
            $this->_subjectlist = (isset($this->getConfig()->CustomSite->field_of_study)
                ? $this->getConfig()->CustomSite->field_of_study->toArray() : []
            );
        }
        return $this->_subjectlist;
    }

    /**
     * Send a acquisition proposal
     *
     * @return mixed
     */
    public function acquisitionAction()
    {
        // Force login:
        $user = $this->getUser();
        if (!$user) {
            return $this->forceLogin();
        }

        // Process save action if necessary:
        if ($this->formWasSubmitted('submit')) {
            return $this->processAcquisition($user);
        }

        return $this->createViewModel(
            [
                'subjectlist' => $this->_getSubjectList()
            ]
        );
    }

    /**
     * Helper function acquisitionAction
     *
     * @param \VuFind\Db\Row\User $user logged in user
     *
     * @return \Zend\View\Model\ViewModel
     * @throws \VuFind\Exception\Mail
     */
    protected function processAcquisition($user)
    {
        $validatorAlnum = new IsInt();
        $validatorString = new StringLength(['min' => 1]);
        $valueArr = [];

        $subject = $this->params()->fromPost('subject');
        $valueArr['subject'] = $subject;
        $proposal = $this->params()->fromPost('proposal');
        $valueArr['proposal'] = $proposal;
        $reasons = $this->params()->fromPost('reasons');
        $valueArr['reasons'] = $reasons;
        $error = false;

        if ($validatorAlnum->isValid($subject)) {
            $this->flashMessenger()->addMessage(
                'PDA::pda_error_subject_blank', 'error'
            );
            $error = true;
        }
        if (!$validatorString->isValid($proposal)) {
            $this->flashMessenger()->addMessage(
                'PDA::pda_error_proposal_blank', 'error'
            );
            $error = true;
        }
        if (!$validatorString->isValid($reasons)) {
            $this->flashMessenger()->addMessage(
                'PDA::pda_error_statement_blank', 'error'
            );
            $error = true;
        }

        if (!$error) {
            // send email
            try {
                $config = $this->getConfig();
                $renderer = $this->getViewRenderer();
                // Custom template for emails (html-only)
                $message_html = $renderer->render(
                    'Email/acquisition-html.phtml',
                    [
                        'user' => $user,
                        'subject' => $this->translate($subject),
                        'proposal' => $proposal,
                        'reasons' => $reasons,
                        'time' => date('d.m.Y H:i')
                    ]
                );
                // Custom template for emails (text-only)
                $message_text = $renderer->render(
                    'Email/acquisition-text.phtml',
                    [
                        'user' => $user,
                        'subject' => $this->translate($subject),
                        'proposal' => $proposal,
                        'reasons' => $reasons,
                        'time' => date('d.m.Y H:i')
                    ]
                );
                $subject = (
                    isset($config->Acquisition->subject_acquisition)
                        ? sprintf(
                            $config->Acquisition->subject_acquisition,
                            $this->translate($subject), $user->username
                        )
                        : $this->translate('PDA::pda_form_title')
                );
                
                $from_unknown = (isset($config->Acquisition->from_unknown)
                    ? $config->Acquisition->from_unknown : '');
                $from = $reply = (isset($user->email))
                    ? new Address($user->email, $user->firstname . ' ' . $user->lastname) 
                    : new Address($from_unknown);

                $to = (isset($config->Acquisition->to))
                    ? new Address($config->Acquisition->to)
                    : '';

                $mailer = new Mailer(
                    $this->getServiceLocator()
                        ->get('VuFind\Mailer')->getTransport()
                );
                
                $mailer->sendTextHtml(
                    $to,
                    $from,
                    $reply,
                    $subject,
                    $message_html,
                    $message_text
                );
                $this->flashMessenger()->addMessage('PDA::pda_send_success', 'info');
            } catch (MailException $e) {
                $this->flashMessenger()->addMessage($e->getMessage(), 'error');
            }
        }

        return $this->createViewModel(
            [
                'subjectlist' => $this->_getSubjectList(),
                'values' => $valueArr
            ]
        );
    }

    /**
     * Reset password action - Allows the reset password form to appear.
     *
     * @return \Zend\View\Model\ViewModel
     */
    public function resetPasswordAction()
    {
        // Force login if necessary:
        $mailConfig = $this->getServiceLocator()
            ->get('VuFind\Config')->get('EmailProfiles');

        if (isset($mailConfig->ResetPassword)) {
            $emailProfile = $mailConfig->ResetPassword;
        } else {
            throw new MailException('Missing email profile: ResetPassword');
        }

        $view = $this->createViewModel();
        
        // Set up reCaptcha
        $view->useRecaptcha = $this->recaptcha()->active('email');

        // Process form submission:
        if ($this->formWasSubmitted('submit', $view->useRecaptcha)) {

            $renderer = $this->getViewRenderer();

            $params['firstname'] = $view->firstname = $this->params()->fromPost('firstname');
            $params['lastname']  = $view->lastname  = $this->params()->fromPost('lastname');
            $params['username']  = $view->username  = $this->params()->fromPost('username');
            $params['email']     = $view->email     = $this->params()->fromPost('email');
            $params['timestamp'] = date('d.m.Y H:i');

            // Custom template for emails (html-only)
            $bodyHtml = $renderer->render(
                'Email/resetpassword-html.phtml', $params
            );
            // Custom template for emails (text-only)
            $bodyPlain = $renderer->render(
                'Email/resetpassword-plain.phtml', $params
            );

            // Build the subject
            $subject = (isset($emailProfile->subject))
                ? sprintf(
                    $emailProfile->subject,
                    $params['firstname'],
                    $params['lastname']
                ) : $this->translate('Reset Password');

            // Set reply address and name if available
            $reply = (isset($params['email'], $params['firstname'], $params['lastname']))
                ? new Address($params['email'], $params['firstname'] . ' ' . $params['lastname'])
                : null;
            
            try {
                // Get mailer
                $mailer = new Mailer(
                    $this->getServiceLocator()
                        ->get('VuFind\Mailer')->getTransport()
                );

                // Send the email
                $mailer->sendTextHtml(
                    new Address($emailProfile->to),
                    new Address($emailProfile->from),
                    $reply,
                    $subject,
                    $bodyHtml,
                    $bodyPlain
                );
                $this->flashMessenger()->addMessage('email_success', 'success');
                return $this->forwardTo('MyResearch', 'Home');
            } catch (MailException $e) {
                $this->flashMessenger()->addMessage($e->getMessage(), 'error');
            }
        }

        // Display the template:
        $view->setTemplate('Auth/AbstractBase/resetpassword');
        return $view;
    }
    
}

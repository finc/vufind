<?php
/**
 * finc specific model for Digital Collection records with a fullrecord in Solr.
 *
 * PHP version 5
 *
 * Copyright (C) Leipzig University Library 2015.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @category VuFind
 * @package  RecordDrivers
 * @author   Dorian Merz <merz@ub.uni-leipzig.de>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org/wiki/vufind2:record_drivers Wiki
 */
namespace finc\RecordDriver;

/**
 * finc specific model for LIDO records with a fullrecord in Solr.
 *
 * @category VuFind
 * @package  RecordDrivers
 * @author   Frank Morgner <morgnerf@ub.uni-leipzig.de>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org/wiki/vufind2:record_drivers Wiki
 */
class SolrDico extends SolrDefault
{
    const INVALID_FULL_RECORD = 'invalid';

    /**
     * @var array with record data
     */
    private $fullrecord;

    /**
     * Constructor
     *
     * @param \Zend\Config\Config $mainConfig VuFind main configuration (omit
     * for built-in defaults)
     * @param \Zend\Config\Config $recordConfig Record-specific configuration
     * file (omit to use $mainConfig as $recordConfig)
     * @param \Zend\Config\Config $searchSettings Search-specific configuration
     * file
     */
    public function __construct($mainConfig = null, $recordConfig = null, $searchSettings = null)
    {
        parent::__construct($mainConfig, $recordConfig, $searchSettings);
    }

    protected function getFullRecord() {

        if (!isset($this->fullrecord)) {
            if (isset($this->fields['fullrecord'])) {
                try {
                    $this->fullrecord = json_decode($this->fields['fullrecord'])[0];
                } catch (\Exception $e) {
                    $this->fullrecord = self::INVALID_FULL_RECORD;
                }
            }
        }
        if ($this->fullrecord == self::INVALID_FULL_RECORD) return [];
        else return $this->fullrecord;
    }

    public function getField($field)
    {
        if (isset($this->fields[$field])) return $this->fields[$field];
        $fullrecord = $this->getFullRecord();
        if (isset($fullrecord->{$field})) return $fullrecord->{$field};
        return parent::getField($field); // TODO: Change the autogenerated stub
    }

    public function __call($name, $arguments=null)
    {
        if (method_exists($this,$name)) {
            return call_user_func_array([$this,$name],$arguments);
        }
        if (strpos($name,'get') === 0) {
            return $this->getField(lcfirst(substr($name,3)));
        }
        return null;
    }

    public function getLicenceInfo() {

        $prefix = "object_rights_statement_";
        $fields = [
            "code" => null,
            "text" => null,
            "url"  => null,
            "icon" => null,
        ];
        foreach ($fields as $key => &$field) {
            $field = $this->getField($prefix.$key);
        }
        return $fields;
    }
    
}